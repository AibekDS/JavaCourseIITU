HelloApplication.java

Данный код на языке программирования Java содержит несколько методов, которые позволяют изменять сцены приложения с помощью библиотеки JavaFX. Также в коде есть метод для регистрации пользователей в базе данных MySQL.

В частности, методы changeScene, changeSceneTwo, changeSceneThree и changeSceneFour изменяют текущую сцену приложения на новую сцену, указанную в параметре fxml, используя библиотеку FXMLLoader. В некоторых методах также используется параметр id, который передается для определенной логики приложения.

Метод signUpUser используется для регистрации нового пользователя в базе данных MySQL. В данном методе осуществляется проверка существования пользователя по его идентификатору в базе данных. Если пользователь уже существует, выводится сообщение об ошибке. В противном случае, происходит добавление нового пользователя в базу данных.

Также в коде импортируются необходимые библиотеки, такие как JavaFX, Java SQL, Java IO и другие.

...............................................................................................................................................................................................................................................................................................................................................


HelloController.java

Этот код написан на языке программирования Java и использует библиотеку JavaFX для создания пользовательского интерфейса. Он содержит класс HelloController, который реализует интерфейс Initializable и имеет несколько аннотаций @FXML, указывающих на элементы пользовательского интерфейса, которые он управляет.

В методе initialize устанавливаются обработчики событий для кнопок Find и signup. Когда пользователь нажимает на кнопку Find, вызывается метод logInUser из класса HelloApplication, который проверяет, существует ли пользователь с указанными именем, идентификатором, паролем и группой в базе данных. Если пользователь существует, вызывается метод changeScene, который отображает вторую сцену приложения, передавая ей идентификатор пользователя в качестве аргумента.

Когда пользователь нажимает на кнопку signup, вызывается метод signUpUser из класса HelloApplication, который создает нового пользователя в базе данных и затем отображает вторую сцену приложения, передавая ей идентификатор пользователя в качестве аргумента.

Кроме того, класс HelloController содержит метод setUserInformation, который используется для установки текста в метке Error.


...............................................................................................................................................................................................................................................................................................................................................

KeeperController.java

Этот код представляет контроллер для окна хранителя записей, который отображает список заметок и позволяет добавлять и удалять заметки.

Переменные и элементы управления:

    back: кнопка, которая переключает окно на предыдущее окно.
    noteList: ListView для отображения списка заметок.
    noteField: текстовое поле для ввода новой заметки.
    idstudent: Label для отображения идентификатора студента.

Конструктор и метод initialize:

    Создаётся новый объект NoteStore, который используется для загрузки и сохранения заметок.
    Загружаются заметки с помощью метода loadNotes из объекта noteStore и добавляются в ListView.
    Добавляется слушатель событий на ListView, который вызывает System.out.println с текстом выбранной заметки.

Методы addNote и deleteNote:

    addNote вызывается, когда пользователь нажимает на кнопку "Добавить". Он получает текст из текстового поля noteField, создает новую заметку с помощью метода addNote из объекта noteStore, сохраняет заметки с помощью метода saveNotes из объекта noteStore, очищает noteField и добавляет новую заметку в ListView.
    deleteNote вызывается, когда пользователь нажимает на кнопку "Удалить". Он получает выбранную заметку из ListView, удаляет ее с помощью метода deleteNoteById из объекта noteStore, сохраняет заметки с помощью метода saveNotes из объекта noteStore, и удаляет заметку из ListView.

Метод SetId:

    SetId вызывается из другого контроллера и используется для передачи идентификатора студента в этот контроллер для использования его в методах addNote и deleteNote.


...............................................................................................................................................................................................................................................................................................................................................


NoteStore.java

Данный код на языке программирования Java отвечает за работу с заметками (notes).

Класс NoteStore содержит методы для загрузки (loadNotes), сохранения (saveNotes), добавления (addNote) и удаления (deleteNoteById) заметок.

Метод loadNotes считывает все строки из файла notes.txt, расположенного по указанному пути (NOTES_FILE). Затем он проходит по каждой строке и, если она соответствует формату "id|myId|text", создает новый объект Note и добавляет его в список заметок.

Метод saveNotes записывает все заметки из переданного списка в файл notes.txt, используя тот же формат "id|myId|text".

Метод getNextNoteId находит максимальный идентификатор заметки из переданного списка и возвращает следующий доступный идентификатор.

Метод addNote добавляет новую заметку в переданный список заметок и в базу данных MySQL с помощью JDBC. Он создает новый объект Note с использованием метода getNextNoteId и добавляет его в переданный список. Затем он создает новую запись в таблице notes базы данных MySQL, используя подготовленный запрос (PreparedStatement).

Метод deleteNoteById удаляет заметку с указанным идентификатором из переданного списка и из базы данных MySQL. Он удаляет объект Note с помощью метода removeIf и создает новый подготовленный запрос для удаления записи в таблице notes базы данных MySQL.

Обратите внимание, что для работы с базой данных MySQL используется JDBC. Для этого необходимо иметь драйвер базы данных MySQL в своем проекте.


...............................................................................................................................................................................................................................................................................................................................................

Note.java

Код содержит определение класса Note, который представляет заметку в приложении. Класс содержит три приватных поля id, myId и text, которые представляют уникальный идентификатор заметки, идентификатор пользователя, создавшего заметку, и текст заметки соответственно.

Конструкторы класса определяются два - без параметров и с параметрами id, myId и text. Если создается новый объект без параметров, то устанавливаются значения полей id и myId равными -1 (незаданным значениям), а значение поля text устанавливается пустой строкой. Если же создается объект с параметрами, то их значения устанавливаются в соответствующие поля объекта.

Методы getId, getMyId и getText используются для доступа к значениям соответствующих полей, а методы setId, setMyId и setText - для установки этих значений. Метод toString переопределяет стандартный метод toString для объекта, возвращая строку с информацией об уникальном идентификаторе и тексте заметки.


...............................................................................................................................................................................................................................................................................................................................................


ViewController.java

Данный код относится к классу "ViewController", который является контроллером пользовательского интерфейса в приложении на JavaFX.

Первая строка импортирует класс "FXCollections" из пакета "javafx.collections", который предоставляет методы для работы с коллекциями JavaFX. Вторая строка импортирует класс "ObservableList", который представляет наблюдаемый список.

Затем идут импорты классов для создания пользовательского интерфейса JavaFX, такие как "Button", "TableView", "TableColumn" и т.д.

Класс содержит методы и поля для работы с таблицей записей. В частности, есть поле "table", которое представляет таблицу, и два столбца "ColId" и "ColCont", которые представляют идентификатор и содержание записи соответственно.

Метод "IdSet" устанавливает значение поля "idView" типа "String", которое используется для фильтрации записей, отображаемых в таблице.

Метод "TableView" инициализирует соединение с базой данных MySQL, выполняет запрос на получение записей из таблицы "notes" для конкретного студента, используя "idView", и заполняет таблицу данными, используя полученный результат.

Метод "initialize" добавляет обработчик событий для кнопки "BackSec", который вызывает метод "changeScene" в классе "HelloApplication" для перехода на предыдущий экран.

Класс "Notes" представляет запись, содержащую идентификатор и текст записи. Этот класс используется для отображения данных в таблице.